#/bin/bash
set -x


function enable_lnet_at_boot_time {
  # Update lnet service to start with correct config and enable at boot time
  lnet_service_config="/usr/lib/systemd/system/lnet.service"
  cp $lnet_service_config $lnet_service_config.backup
  search_string="ExecStart=/usr/sbin/lnetctl import /etc/lnet.conf"
  nic_add="ExecStart=/usr/sbin/lnetctl net add --net tcp1 --if $interface  –peer-timeout 180 –peer-credits 128 –credits 1024"

  sed -i "s|$search_string|#$search_string\n$nic_add|g" $lnet_service_config
  # To comment ConditionPathExists clause
  sed -i "s|ConditionPathExists=\!/proc/sys/lnet/|#ConditionPathExists=\!/proc/sys/lnet/|g" $lnet_service_config

  systemctl status lnet
  systemctl enable lnet
}


##############
# Start of script execution
#############

mgs_fqdn_hostname_nic1={{ management_server_filesystem_vnic_hostname_prefix }}1.{{ filesystem_subnet_domain_name }}
fs_type={{ fs_type }}
uname -a

# ensure the change before reboot is effective (should be unlimited)
ulimit -l
uname -a
getenforce
modprobe lnet
lnetctl lnet configure
lnetctl net show

# On Client nodes, use the 1st VNIC only.
privateIp=`curl -s http://169.254.169.254/opc/v1/vnics/ | jq '.[0].privateIp ' | sed 's/"//g' ` ; echo $privateIp
interface=`ip addr | grep -B2 $privateIp | grep "BROADCAST" | gawk -F ":" ' { print $2 } ' | sed -e 's/^[ \t]*//'` ; echo $interface

lnetctl net add --net tcp1 --if $interface  –peer-timeout 180 –peer-credits 128 –credits 1024


lnetctl net show --net tcp > tcp.yaml
lnetctl  import --del tcp.yaml
lctl list_nids

  # Add logic to ensure the below is not empty
    cmd=`nslookup ${mgs_fqdn_hostname_nic1} | grep -qi "Name:"`
    while [ $? -ne 0 ];
    do
      echo "Waiting for nslookup..."
      sleep 10s
      cmd=`nslookup ${mgs_fqdn_hostname_nic1} | grep -qi "Name:"`
    done



mgs_ip=`nslookup ${mgs_fqdn_hostname_nic1} | grep "Address: " | gawk '{ print $2 }'` ; echo $mgs_ip
if [ -z $mgs_ip ]; then
  exit 1;
fi


# Scratch or Persistent
if [ "$fs_type" == "Scratch" ]; then
  disk_type=nvme
  fsname=lfsnvme
else
  disk_type=bv
  fsname=lfsbv
fi

function mount_lustrefs() {
    echo "sleep - 100s"
    sleep 100s
    mount -t lustre ${mgs_ip}@tcp1:/$fsname $mount_point
}


mount_point={{ mount_point }}
mkdir -p $mount_point
mount_lustrefs
while [ $? -ne 0 ]; do
    mount_lustrefs
done

## Update fstab
cp /etc/fstab /etc/fstab.backup
echo "${mgs_ip}@tcp1:/$fsname  $mount_point lustre defaults,_netdev,x-systemd.automount,x-systemd.requires=lnet.service 0 0" >> /etc/fstab

sudo chown -R opc:opc $mount_point

df -h


# function call
enable_lnet_at_boot_time


echo "complete"
set +x

