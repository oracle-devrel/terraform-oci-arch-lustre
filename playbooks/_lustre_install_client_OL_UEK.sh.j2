#/bin/bash


# This script is currently not executed by Terraform or Marketplace Stack. This should be used if you plan to run lustre client on a node with OracleLinux UEK operating system.  This requires lustre client rpms which are compiled against the same OracleLinux UEK kernel version.  Given below is one such version for reference.  Reach out to OCI HPC Team - pinkesh.valdria@oracle.com for more details on your project needs.   With this version, there is no need to reboot the node after installing lustre rpms. The lustre_install_client.sh (not this script) file when ran on an OL-UEK image, it will update the grub loader to switch to OL non-UEK version and does a reboot using ansible code.

set -x



function download_lustre_rpms {

  yum install createrepo -y -q
  cd /root
  curl -O  https://objectstorage.ap-osaka-1.oraclecloud.com/p/GKbPJAzrkKXSiXql9QOuuER_YfLKAMMSFEX04il5ND61zVLh5KIt5_GM-j5wLtV_/n/hpc_limited_availability/b/SKT/o/lustre-client-2.13.57-for-OL77UEK5.tgz
  tar -xzvf lustre-client-2.13.57-for-OL77UEK5.tgz
  cd lustre-client-2.13.57-for-OL77UEK5/
  mkdir RPMS
  mv *.rpm RPMS/
  createrepo /root/lustre-client-2.13.57-for-OL77UEK5
  chmod -R o-w+r /root/lustre*
  chmod -R o-w+r /root/*
}


function install_lustre {


cat > /etc/yum.repos.d/local_lustre.repo << EOF
[local]
name=lustre-local-client - local packages
baseurl=file:///root/lustre-client-2.13.57-for-OL77UEK5/
enabled=1
gpgcheck=0
protect=1
EOF


# Only client should be installed
yum  install  lustre-client  -y
if [ $? -ne 0 ]; then
  echo "yum install of lustre binaries failed"
  exit 1
fi


}


##########
## Start #
##########

setenforce 0
sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config

download_lustre_rpms
install_lustre

# Needs a reboot for this to be effective, test it after reboot using ulimit -l
echo "*          hard   memlock           unlimited
*          soft    memlock           unlimited
" >> /etc/security/limits.conf


echo "options ksocklnd nscheds=10 sock_timeout=100 credits=2560 peer_credits=63 enable_irq_affinity=0"  >  /etc/modprobe.d/ksocklnd.conf


function enable_lnet_at_boot_time {
  # Update lnet service to start with correct config and enable at boot time
  lnet_service_config="/usr/lib/systemd/system/lnet.service"
  cp $lnet_service_config $lnet_service_config.backup
  search_string="ExecStart=/usr/sbin/lnetctl import /etc/lnet.conf"
  nic_add="ExecStart=/usr/sbin/lnetctl net add --net tcp1 --if $interface  –peer-timeout 180 –peer-credits 128 –credits 1024"

  sed -i "s|$search_string|#$search_string\n$nic_add|g" $lnet_service_config
  # To comment ConditionPathExists clause
  sed -i "s|ConditionPathExists=\!/proc/sys/lnet/|#ConditionPathExists=\!/proc/sys/lnet/|g" $lnet_service_config

  systemctl status lnet
  systemctl enable lnet
}




mgs_fqdn_hostname_nic1={{ management_server_filesystem_vnic_hostname_prefix }}1.{{ filesystem_subnet_domain_name }}
fs_type={{ fs_type }}
uname -a

# should be unlimited
ulimit -l
uname -a
getenforce
modprobe lnet
lnetctl lnet configure
lnetctl net show

# On Client nodes, use the 1st VNIC only.
privateIp=`curl -s http://169.254.169.254/opc/v1/vnics/ | jq '.[0].privateIp ' | sed 's/"//g' ` ; echo $privateIp
interface=`ip addr | grep -B2 $privateIp | grep "BROADCAST" | gawk -F ":" ' { print $2 } ' | sed -e 's/^[ \t]*//'` ; echo $interface

lnetctl net add --net tcp1 --if $interface  –peer-timeout 180 –peer-credits 128 –credits 1024


lnetctl net show --net tcp > tcp.yaml
lnetctl  import --del tcp.yaml
lctl list_nids

  # Add logic to ensure the below is not empty
    cmd=`nslookup ${mgs_fqdn_hostname_nic1} | grep -qi "Name:"`
    while [ $? -ne 0 ];
    do
      echo "Waiting for nslookup..."
      sleep 10s
      cmd=`nslookup ${mgs_fqdn_hostname_nic1} | grep -qi "Name:"`
    done



mgs_ip=`nslookup ${mgs_fqdn_hostname_nic1} | grep "Address: " | gawk '{ print $2 }'` ; echo $mgs_ip
if [ -z $mgs_ip ]; then
  exit 1;
fi


# Scratch or Persistent
if [ "$fs_type" == "Scratch" ]; then
  disk_type=nvme
  fsname=lfsnvme
else
  disk_type=bv
  fsname=lfsbv
fi

function mount_lustrefs() {
    echo "sleep - 100s"
    sleep 100s
    mount -t lustre ${mgs_ip}@tcp1:/$fsname $mount_point
}


mount_point={{ mount_point }}
mkdir -p $mount_point
mount_lustrefs
while [ $? -ne 0 ]; do
    mount_lustrefs
done

## Update fstab
cp /etc/fstab /etc/fstab.backup
echo "${mgs_ip}@tcp1:/$fsname  $mount_point lustre defaults,_netdev,x-systemd.automount,x-systemd.requires=lnet.service 0 0" >> /etc/fstab

sudo chown -R opc:opc $mount_point

df -h


# function call
enable_lnet_at_boot_time

touch /tmp/complete

set +x

##########
## End #
##########


